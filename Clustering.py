# -*- coding: utf-8 -*-
"""Shagata_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c3n9XIUMwbNRxjC7TazPWHp8MrJoH5Na
"""

from google.colab import drive
drive.mount("/content/gdrive")

import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

import pandas as pd
NewData=pd.read_excel('/content/gdrive/My Drive/DLDatasets/Shagata_paper2/merged data_1220resposes.xlsx')
data_will=NewData['willing']

indx_take=NewData[NewData['willing']=='Already taken'].index.values.tolist()


data_numeric=NewData['Certainity']
data_numeric=data_numeric.fillna(' ') #check missing values in certainity
data_numeric=data_numeric.replace(' ',5) #fill with average value of 5
data_numeric[indx_take]=10  #make the certaninty of vaccinate people to 10
data_numeric=(data_numeric-5)/5.0 #within the range (-1,1) same as willingness

data_will=data_will.fillna(' ')
data_will=data_will.replace('Yes',1)
data_will=data_will.replace(' ',0)
data_will=data_will.replace('No',-1)
data_will=data_will.replace('Maybe',0)
data_will=data_will.replace('Already taken',1)



df = pd.concat([data_will, data_numeric], axis=1)#Concat willingness and certainity

matplotlib.rcParams['lines.linewidth'] = 4
import scipy.cluster.hierarchy as shc
from google.colab import files
#plt.figure(figsize=(200, 140))  #to check x label of entry id
plt.figure(figsize=(10, 7))
plt.title("Dendrograms",fontsize=18)
plt.xlabel('Sample index',fontsize=16)
plt.ylabel('Distance',fontsize=18)

dend = shc.dendrogram(shc.linkage(df, method='ward'),color_threshold=10, above_threshold_color='k')
plt.axhline(y=10, color='#a64038', linestyle='--',linewidth=3)
#plt.axhline(y=1.2, color='y', linestyle='--',linewidth=3)

##Use this to save big image to see index number
ax = plt.gca()
ax.tick_params(axis='x', which='major', labelsize=7)

plt.savefig("clustering.png")
files.download("clustering.png")
plt.show()


# from sklearn.cluster import AgglomerativeClustering
# cluster = AgglomerativeClustering(n_clusters=4, affinity='euclidean', linkage='ward')
# pred_list=cluster.fit_predict(data_numeric)


# data_pred=data
# data_pred.insert(2, "Prediction", pred_list)
# print(data_pred.head())
# data_pred.to_csv('answer_preds_2021.csv')

